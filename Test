create_flight:
A portion of the flight hours restrictions are recorded here for each crew member and sent to View(). It is reviewed here, and flight information is not recorded here until the crew member section is approved.

get_crews:
Flight restrictions are being reviewed in this section.
Information collection for each crew role is taken here.



update_crews:
Here, the hours of restrictions are checked and error management is performed, and if flight hours are calculated.



crew_flight_summary:
The section displays the history of each crew based on the user's selection in the selected time period of flight hours and calculates the remaining hours.





.....setting.py.....
SECRET_KEY = config("SECRET_KEY", default='django-insecure-v!!p07q542o11a=jzhp^c)bq%+=^odvfqbem%22mupm!-npqgr')
DEBUG = config("DEBUG", cast=bool, default=True)
ALLOWED HOSTS = config("ALLOWED HOSTS", cast= lambda v: [item.strip() for item in v.split(',')], default="*")


BASE DIR DIR / 'templates'


DATABASES = {

'default':{

'ENGINE': 'django.db.backends.postgresql',
'NAME': config("PGDB_NAME", default='postgres'),
'USER': config("PGDB_USER", default='postgres'),
'PASSWORD': config("PGDB_PASSWORD", default='postgres'),
'HOST': config("PGDB_HOST", default='db'),
'PORT': config("PGDB_PORT", cast=int, default=5432),}
}


TIME ZONE = config("TIME ZONE", default="UTC")


STATIC_URL = 'static/'
MEDIA URL = 'media/'

STATIC ROOT = BASE DIR / 'staticfiles'
STATIC ROOT = BASE DIR / 'media'


STATICFILES DIRS = [ BASE DIR / 'static' ]


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST", default="smtp4dev") 
EMAIL USE_TLS = config("EMAIL USE_TLS", cast=bool,default=False) 
EMAIL_USE_SSL = config("EMAIL_USE_SSL", cast=bool, default=False) 
EMAIL_PORT = config("EMAIL_PORT", cast=int, default=25) 
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="") 
EMAIL_HOST_PASSWORD = config("EMAIL HOST_PASSWORD", default="")


SHOW DEBUGGER TOOLBAR = config("SHOW_DEBUGGER TOOLBAR",cast=bool, default=True)
if SHOW_DEBUGGER TOOLBAR:

INSTALLED_APPS += [

"debug toolbar",

1

MIDDLEWARE +=

"debug toolbar.middleware.DebugToolbarMiddleware",

import socket # only if you haven't already imported this hostname,, ips = socket.gethostbyname_ex(socket.gethostname()) INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]



......................................
for files static,midea,..
.gitkeep
.....................
......urls.py......
from django.conf import settings

if settings. SHOW_DEBUGGER_TOOLBAR:
urlpatterns += [path(' debug/', include('debug_toolbar.urls')),]
..........................
pip install django-debug-toolbar
pip install python-decouple






<!-- ŸÖÿ´ÿßŸÑ: Tawk.to -->
<script type="text/javascript">
var Tawk_API = Tawk_API || {}, Tawk_LoadStart = new Date();
(function(){
 var s1 = document.createElement("script"), s0 = document.getElementsByTagName("script")[0];
 s1.async = true;
 s1.src = 'https://embed.tawk.to/YOUR_PROPERTY_ID/DEFAULT';
 s1.charset = 'UTF-8';
 s1.setAttribute('crossorigin','*');
 s0.parentNode.insertBefore(s1, s0);
})();
</script>



import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);




import React from 'react';

function App() {
  return (
    <div>
      <h1>ÿ≥ŸÑÿßŸÖ ÿßÿ≤ React üíª</h1>
    </div>
  );
}

export default App;






# 1. ⁄©ŸÑŸàŸÜ Ÿæÿ±Ÿà⁄òŸá
git clone https://github.com/httpsMrFeri/Nobo.git

# 2. ÿ±ŸÅÿ™ŸÜ ÿØÿßÿÆŸÑ ŸæŸàÿ¥Ÿá
cd Nobo

# 3. ŸÜÿµÿ® Ÿæ⁄©€åÿ¨‚ÄåŸáÿß
npm install

# 4. ÿßÿ¨ÿ±ÿß€å ŸÑŸà⁄©ÿßŸÑ ÿ±Ÿà€å localhost:3000
npm start


{
  "name": "react-frontend",
  "version": "1.0.0",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-scripts": "5.0.1"
  }
}



==========#Dockerfile=================

FROM python:3.10-slim-buster

LABEL maintainer="bigdeli.ali3@gmail.com"

ENV PYTHONUNBUFFERED 1

WORKDIR /usr/src/app

COPY ./requirements.txt

RUN pip install --upgrade pip && pip install -r requirements.txt

COPY ./core
=====================

=============#Docker-yml=====================

version: "3.9"

services:

db:

container_name: db

image: postgres:15-alpine

volumes:

./postgres/data:/var/lib/postgresql/data environment:

POSTGRES_DB=postgres

POSTGRES USER postgres

POSTGRES_PASSWORD=postgres

restart: always

backend:

container name: backend

build:

context:

dockerfile: ./dockerfiles/dev/django/Dockerfile

volumes:

-./core:/user/src/app

environment:

DEBUG=True

restart: always

depends on:
     - db
smtp4dev:

image: rnwood/smtp4dev:v3

restart:

ports:

always

5000:80

25:25

'143:143'

volumes:

- smtp4dev-data:/smtp4dev

environment:

volumes:

ServerOptions HostName=smtp4dev

smtp4dev-data:

=========================
